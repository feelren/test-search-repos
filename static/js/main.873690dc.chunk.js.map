{"version":3,"sources":["styles/dist/SearchField.module.css","api.js","store/reducer.js","components/SearchField.jsx","components/SearchResults.jsx","App.js","reportWebVitals.js","store/store.js","index.js","styles/dist/SearchResults.module.css"],"names":["module","exports","instance","axios","baseURL","api","text","get","then","response","data","catch","e","console","log","SET_REPOS","CLEAR_REPOS","TOGGLE_IS_FETCHING","SET_NO_RESULTS_TRUE","SET_NO_RESULTS_FALSE","CHANGE_SEARCH_TEXT","initialState","repos","searchText","isFetching","noResults","clearRepos","type","toggleIsFetching","setNoResultsFalse","getReposThunk","dispatch","total_count","items","reducer","state","action","SearchField","useDispatch","useSelector","root","searchInput","React","createRef","inputValueChangeHandler","current","value","changeSearchText","className","s","wrapper","ref","onChange","SearchResults","useEffect","notification","map","repo","item","href","html_url","target","rel","name","row","stargazers_count","watchers_count","id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.873690dc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SearchField_wrapper__hmxQK\"};","import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: \"https://api.github.com\",\r\n});\r\n\r\nexport const api = {\r\n\tgetReposByText(text) {\r\n\t\treturn instance\r\n\t\t\t.get(`/search/repositories?q=${text}`)\r\n\t\t\t.then((response) => response.data)\r\n\t\t\t.catch((e) => console.log(e));\r\n\t},\r\n};\r\n\r\n// baseURL: 'https://api.github.com/search/repositories?q=subject'\r\n","import {api} from \"./../api\";\r\n\r\nconst SET_REPOS = \"SET_REPOS\";\r\nconst CLEAR_REPOS = \"CLEAR_REPOS\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst SET_NO_RESULTS_TRUE = \"SET_NO_RESULTS_TRUE\";\r\nconst SET_NO_RESULTS_FALSE = \"SET_NO_RESULTS_FALSE\";\r\nconst CHANGE_SEARCH_TEXT = \"CHANGE_SEARCH_TEXT\";\r\n\r\nlet initialState = {\r\n\trepos: [],\r\n\tsearchText: \"\",\r\n\tisFetching: false,\r\n\tnoResults: false,\r\n};\r\n\r\nlet reducer = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_REPOS: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\trepos: action.repos,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase CHANGE_SEARCH_TEXT: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tsearchText: action.text,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase CLEAR_REPOS: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\trepos: [],\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase TOGGLE_IS_FETCHING: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisFetching: !state.isFetching,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase SET_NO_RESULTS_TRUE: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tnoResults: true,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase SET_NO_RESULTS_FALSE: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tnoResults: false,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst setRepos = (repos) => ({\r\n\ttype: SET_REPOS,\r\n\trepos,\r\n});\r\n\r\nexport const changeSearchText = (text) => ({\r\n\ttype: CHANGE_SEARCH_TEXT,\r\n\ttext,\r\n});\r\n\r\nexport const clearRepos = () => ({\r\n\ttype: CLEAR_REPOS,\r\n});\r\n\r\nconst toggleIsFetching = () => ({\r\n\ttype: TOGGLE_IS_FETCHING,\r\n});\r\n\r\nconst setNoResultsTrue = () => ({\r\n\ttype: SET_NO_RESULTS_TRUE,\r\n});\r\n\r\nexport const setNoResultsFalse = () => ({\r\n\ttype: SET_NO_RESULTS_FALSE,\r\n});\r\n\r\nexport const getReposThunk = (searchText) => {\r\n\treturn (dispatch) => {\r\n\t\tdispatch(toggleIsFetching());\r\n\t\tapi.getReposByText(searchText).then((data) => {\r\n\t\t\tif (data.total_count) {\r\n\t\t\t\tdispatch(toggleIsFetching());\r\n\t\t\t\tdispatch(setNoResultsFalse());\r\n\t\t\t\tdispatch(setRepos(data.items));\r\n\t\t\t} else {\r\n\t\t\t\tdispatch(toggleIsFetching());\r\n\t\t\t\tdispatch(setNoResultsTrue());\r\n\t\t\t\tdispatch(clearRepos());\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n};\r\n\r\nexport default reducer;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport s from '../styles/dist/SearchField.module.css'\r\nimport { clearRepos, changeSearchText, setNoResultsFalse } from './../store/reducer';\r\n\r\nfunction SearchField() {\r\n    const dispatch = useDispatch();\r\n    const searchText = useSelector((state) => state.root.searchText);\r\n    let searchInput = React.createRef();\r\n\r\n    const inputValueChangeHandler = () => {\r\n        let text = searchInput.current.value;\r\n\r\n        dispatch(changeSearchText(text))\r\n        if (!text) {\r\n            dispatch(clearRepos())\r\n            dispatch(setNoResultsFalse())\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <input type=\"text\" value={searchText} ref={searchInput} onChange={() => inputValueChangeHandler()} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchField;","import { React, useEffect } from 'react';\r\nimport s from '../styles/dist/SearchResults.module.css'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getReposThunk } from '../store/reducer';\r\n\r\nconst SearchResults = () => {\r\n    const isFetching = useSelector(state => state.root.isFetching);\r\n    const noResults = useSelector((state) => state.root.noResults);\r\n    const repos = useSelector((state) => state.root.repos);\r\n    const searchText = useSelector((state) => state.root.searchText);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (searchText) dispatch(getReposThunk(searchText));\r\n    }, [searchText, dispatch])\r\n\r\n    return (\r\n        <ul className={s.wrapper}>\r\n            {isFetching && <div className={s.notification}>Загрузка списка..</div>}\r\n            {noResults && !isFetching ? <div className={s.notification}>Нет результатов</div> : null}\r\n\r\n            {\r\n                repos.map(repo => {\r\n                    return (\r\n\r\n                        <li key={repo.id} className={s.item}>\r\n                            <a href={repo.html_url} target='_blank' rel=\"noreferrer\">{repo.name}</a>\r\n                            <div className={s.row}>\r\n                                <p>Stargazers_count: <span>{repo.stargazers_count}</span></p>\r\n                                <p>Watchers_count: <span>{repo.watchers_count}</span></p>\r\n                            </div>\r\n                        </li>\r\n\r\n                    )\r\n                })\r\n            }\r\n        </ul >\r\n\r\n    );\r\n}\r\n\r\nexport default SearchResults;\r\n","import SearchField from \"./components/SearchField\";\nimport SearchResults from \"./components/SearchResults\";\n\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<SearchField />\n\t\t\t<SearchResults />\n\t\t</>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducer from \"./reducer\";\r\n\r\nlet reducers = combineReducers({\r\n\troot: reducer,\r\n});\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SearchResults_wrapper__3Fycr\",\"notification\":\"SearchResults_notification__1EeUU\",\"item\":\"SearchResults_item__fdqS6\",\"row\":\"SearchResults_row__3IriH\"};"],"sourceRoot":""}